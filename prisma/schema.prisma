// schema.prisma

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["linux-musl", "windows", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  product_id            String                 @id @default(uuid())
  product_name          String
  description           String
  code                  String                 @unique @db.Char(6) // CHAR(6) for code
  unit_price            Decimal
  unit_of_measure       String
  category_id           String
  category              Category               @relation(fields: [category_id], references: [category_id])
  quantity_in_stock     Decimal                 @default(0)
  InventoryCountDetails InventoryCountDetail[]
  SalesDetails          SaleDetail[]
  PurchaseOrderDetails  PurchaseOrderDetail[]

  @@map("products")
}

model Category {
  category_id   String    @id @default(uuid())
  category_name String
  description   String
  products      Product[]

  @@map("categories")
}

model Location {
  location_id     String           @id @default(uuid())
  location_name   String
  location_type   String
  InventoryCounts InventoryCount[]

  @@map("locations")
}

model InventoryCount {
  count_id              String                 @id @default(uuid())
  count_date            DateTime
  count_by              String
  location_id           String
  status                OrderItemStatus
  user                  User                   @relation(fields: [count_by], references: [user_id])
  location              Location               @relation(fields: [location_id], references: [location_id])
  InventoryCountDetails InventoryCountDetail[]

  @@map("inventory_counts")
}

model InventoryCountDetail {
  detail_id        String         @id @default(uuid())
  count_id         String
  product_id       String
  counted_quantity Decimal
  system_quantity  Decimal
  difference       Decimal
  inventoryCount   InventoryCount @relation(fields: [count_id], references: [count_id])
  product          Product        @relation(fields: [product_id], references: [product_id])

  @@map("inventory_count_details")
}

model User {
  user_id         String           @id @default(uuid())
  username        String           @unique
  email           String           @unique
  role            UserRole         @default(CONSULTOR_DE_ESTOQUE)
  InventoryCounts InventoryCount[]
  googleId        String?          @unique
  avatar_url      String?

  @@map("users")
}

model Supplier {
  supplier_id    String          @id @default(uuid())
  supplier_name  String
  contact_info   String
  email          String
  phone          String
  address        String
  purchaseOrders PurchaseOrder[]

  @@map("suppliers")
}

model Customer {
  customer_id   String @id @default(uuid())
  customer_name String
  contact_info  String
  sales         Sale[]

  @@map("customers")
}

model PurchaseOrder {
  purchase_order_id    String                @id @default(uuid())
  supplier_id          String
  order_date           DateTime
  status               OrderItemStatus
  supplier             Supplier              @relation(fields: [supplier_id], references: [supplier_id])
  purchaseOrderDetails PurchaseOrderDetail[]

  @@map("purchase_orders")
}

model PurchaseOrderDetail {
  purchase_order_detail_id String        @id @default(uuid())
  purchase_order_id        String
  product_id               String
  quantity                 Decimal
  unit_price               Decimal
  created_at               DateTime      @default(now())
  updated_at               DateTime      @updatedAt
  purchaseOrder            PurchaseOrder @relation(fields: [purchase_order_id], references: [purchase_order_id])
  product                  Product       @relation(fields: [product_id], references: [product_id])

  @@map("purchase_order_details")
}

model Sale {
  sale_id     String          @id @default(uuid())
  customer_id String
  sale_date   DateTime
  status      OrderItemStatus
  customer    Customer        @relation(fields: [customer_id], references: [customer_id])
  SaleDetails SaleDetail[]

  @@map("sales")
}

model SaleDetail {
  sale_detail_id String   @id @default(uuid())
  sale_id        String
  product_id     String
  quantity       Decimal
  unit_price     Decimal
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  sale           Sale     @relation(fields: [sale_id], references: [sale_id])
  product        Product  @relation(fields: [product_id], references: [product_id])

  @@map("sale_details")
}

enum OrderItemStatus {
  PENDENTE
  ENVIADO
  ENTREGUE
  CANCELADO
}

enum UserRole {
  ADMIN
  CLIENTE
  FORNECEDOR
  OPERADOR
  GERENTE_DE_ESTOQUE
  ANALISTA_DE_ESTOQUE
  SUPERVISOR_DE_VENDAS
  CONTADOR
  AUDITOR
  RECEPCIONISTA_DE_ENTREGAS
  SUPERVISOR_DE_PRODUCAO
  TRANSPORTADOR
  CONSULTOR_DE_ESTOQUE
}
